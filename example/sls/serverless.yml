service: failureLambdaExample
frameworkVersion: ">=1.34.0 <2.0.0"
provider:
  name: aws
  runtime: nodejs14.x
  memorySize: 128
  iamRoleStatements:
    - Effect: Allow
      Action:
        - ssm:GetParameters
        - ssm:GetParameter
      Resource:
        Fn::Join:
          - ''
          - - 'arn:aws:ssm:${opt:region, self:provider.region}:*:parameter/'
            - Ref: failureLambdaParameter
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:UpdateItem
      Resource:
        Fn::Join:
          - ''
          - - 'arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/'
            - Ref: failureLambdaTable
functions:
  failureLambdaExample:
    handler: index.handler
    timeout: 3
    environment:
      FAILURE_INJECTION_PARAM:
        Ref: failureLambdaParameter
      FAILURE_INJECTION_TABLE:
        Ref: failureLambdaTable
    events:
      - http:
          path: /
          method: get
          cors: true
resources:
  Resources:
    failureLambdaParameter:
      Type: 'AWS::SSM::Parameter'
      Properties:
        Type: String
        Value: '{"isEnabled": false, "failureMode": "latency", "rate": 1, "minLatency": 100, "maxLatency": 400, "exceptionMsg": "Exception message!", "statusCode": 404, "diskSpace": 100, "denylist": ["s3.*.amazonaws.com", "dynamodb.*.amazonaws.com"]}'
    failureLambdaTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
package:
  exclude:
    - .vscode
    - .serverless
